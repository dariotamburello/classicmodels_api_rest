<% 
    const titles = data.tableTitles
    const rows = data.tableRows
    const modelForm = data.modelForm
    const pagination = data.pagination
    const moduleName = 'products'
%>

<div class="home-content">
    <section class="content" id="products">
        <div class="header">
            <div class="title">All products</div>
            <button id="create-new-product" class="pure-button pure-button-primary">New Product</button>
        </div>
        <div class="bodyTable">
            <%- include('./components/tables_with_actions', { titles, rows, pagination, moduleName }); -%>
        </div>
    </section>
</div>

<div id="overlay-1" class="overlay"></div>
<%- include('./components/popup-edit'); -%>
<%- include('./components/popup-view'); -%>
<%- include('./components/popup-create'); -%>
<div id="overlay-2" class="overlay"></div>
<%- include('./components/popup-select'); -%>

<script type="module">
    import Notiflix from '/js/libs/notiflix.js'
    import { commonHelpers } from '/js/helpers/commonFunctions.js'
    const formModel = <%- JSON.stringify(modelForm) %>
    const productLines = <%- JSON.stringify(data.secondaryData.productLines) %>

    window.addEventListener('load', function () {
        const overlay1 = document.querySelector('#overlay-1')
        const overlay2 = document.querySelector('#overlay-2')

        // popup create
        const buttonCreateNew = document.querySelector('#create-new-product')
        const popupCreate = document.querySelector("#popup-create")
        const sectionForInputs = document.querySelector("#create-fields")
        const formNew = document.querySelector("#form-create")
        const buttonSaveNew = document.querySelector('#saveNew')

        // popup view
        const viewButtons = document.querySelectorAll(".action_view")
        const popupView = document.querySelector("#popup-view")
        const viewFields = document.querySelector("#view-fields")

        // popup edit
        const editButtons = document.querySelectorAll(".action_edit")
        const editForm = document.querySelector(".pure-form")
        const popupEdit = document.querySelector("#popup-edit")
        const saveChanges = document.querySelector("#saveChanges")
        const deleteButton = document.querySelector('#deleteButton')

        const editPopupSelectedTab = document.querySelector("#tab-hidden-field")
        const editTabs = document.querySelector("#edit-tabs-area")
        const editFieldsInput = document.querySelector("#edit-fields-input")


        // LISTENERS
        buttonCreateNew.addEventListener("click", function() {
            commonHelpers.openPopUp(popupCreate, overlay1)
            modifyDOM.createAllInputs(sectionForInputs, true)
        })

        buttonSaveNew.addEventListener("click", function(e) {
            e.preventDefault()
            const formData = {};
            [...formNew.elements].forEach(item => {
                if (item.value === '' || item.value === undefined) return
                let value = item.value
                if (item.type === 'number' || !isNaN(item.value)) {
                    value = parseFloat(item.value)
                }
                formData[item.id] = value
            })
            actions.submit(formData)
        })
        
        viewButtons.forEach(button => {
            button.addEventListener("click", async function() {
                const datafind = await actions.getProducts(button.getAttribute('data'))
                datafind.productCode = datafind.id
                modifyDOM.createAllInputs(viewFields, false)
                modifyDOM.updateAllViewInputs(viewFields, datafind)
                commonHelpers.openPopUp(popupView, overlay1)
            })
        })

        editButtons.forEach(button => {
            button.addEventListener("click", async function() {
                const datafind = await actions.getProducts(button.getAttribute('data'))
                editPopupSelectedTab.setAttribute('data', button.getAttribute('data'))
                popupEdit.setAttribute('data', datafind.id)
                modifyDOM.createEditTabs(formModel)
                
                document.querySelectorAll(".editTab").forEach(tab => {
                    tab.addEventListener("click", function() {
                        const child = modifyDOM.createNewEditInput(tab.id)
                        saveChanges.setAttribute('disabled', true)
                        if (child) {
                            editPopupSelectedTab.setAttribute('value', tab.id)
                            saveChanges.removeAttribute('disabled')
                            editFieldsInput.appendChild(child)
                            const fieldName = tab.id
                            modifyDOM.updateNewEditInput(fieldName, datafind[fieldName])
                        } 
                    })
                })

                commonHelpers.openPopUp(popupEdit, overlay1)
                saveChanges.setAttribute('disabled', true)
            })
        })

        saveChanges.addEventListener("click", function(e) {
            e.preventDefault()
            const selectedTab = document.querySelector("#tab-hidden-field")
            const editInput = document.querySelector(".editInput")
            let value = editInput.value
            if (!isNaN(editInput.value)) {
                value = parseFloat(editInput.value)
            }
            const dataToUpdate = {
                id: selectedTab.getAttribute('data'),
                field: selectedTab.getAttribute('value'),
                value: value
            }
            actions.saveChanges(dataToUpdate)
        })

        deleteButton.addEventListener("click", function(e) {
            e.preventDefault()
            Notiflix.Confirm.show('Delete confirm','Are you sure to delete this product?','Yes','No',
                () => {
                    const elementId = editPopupSelectedTab.getAttribute('data')
                    actions.deleteRegister(elementId)
                },
                () => {
                    return false
                },
                {okButtonBackground: '#ca3c3c'},
            )
        })


        // REUSABLE CODE
        const actions = {
            getProducts: async function(id) {
                const response = await fetch(`http://localhost:3000/products/${id}?complete=true`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                const jsonResponse = await response.json()
                if (jsonResponse.error) {
                    Notiflix.Loading.remove()
                    return Notiflix.Notify.failure(result.error.errorTitle || 'An error occurred')
                }
                return jsonResponse[0]
            },
            saveChanges: function(dataToUpdate) {
                fetch(`http://localhost:3000/products/${dataToUpdate.id}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        [dataToUpdate.field]: dataToUpdate.value 
                    })
                }).then(res => {
                    commonHelpers.validateResponse(res, location)
                })
            },
            deleteRegister: function(id) {
                fetch(`http://localhost:3000/products/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(res => {
                    commonHelpers.validateResponse(res, location)
                })
            },
            submit: function(newElement) {
                fetch(`http://localhost:3000/products/`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(newElement)
                }).then(res => {
                    commonHelpers.validateResponse(res, location)
                })
            }
        }

        const modifyDOM = {
            createAllInputs: function(container, editable) {
                container.innerHTML = ''
                formModel.map((input) => {
                    const newLabel = document.createElement('label')
                    newLabel.setAttribute('for', input.field)
                    newLabel.textContent = input.title
                    const newField = document.createElement(input.input)
                    newField.setAttribute('type', input.type)
                    newField.setAttribute('id', input.field)
                    if (input.step !== null) newField.setAttribute('step', input.step)
                    if (input.input === 'select') modifyDOM.createSelectInput(input.field, newField)
                    if (input.required) {
                        newField.setAttribute('required', input.required)
                        newLabel.insertAdjacentHTML('beforeend', '<span>*<span/>')
                    }
                    // if (input.input === 'select' && input.field === 'productLine') {
                    //     productLines.map((line) => {
                    //         const option = document.createElement('option')
                    //         option.setAttribute('id', line.productLine)
                    //         option.textContent = line.productLine
                    //         newField.appendChild(option)
                    //     })
                    // }
                    newField.className = 'pure-u-23-24'
                    if (!editable) newField.setAttribute('readonly', 'true')
                    let htmlFieldGroup = `
                    <div class="pure-u-1 pure-u-md-1-3">
                        ${newLabel.outerHTML}
                        ${newField.outerHTML}
                    <div/>`
                    container.insertAdjacentHTML('beforeend', htmlFieldGroup)
                })
            },
            updateAllViewInputs: function(fields, dataToFill) {
                for (let key in dataToFill) {
                    let inputElement = document.getElementById(key)
                    if (inputElement) {
                        if (inputElement.tagName === 'SELECT') {
                            for (let option of inputElement.options) {
                                if (option.value === dataToFill[key]) {
                                    option.selected = true
                                    break
                                }
                            }
                        } else if (inputElement.tagName === 'TEXTAREA') {
                            inputElement.textContent = dataToFill[key]
                        } else {
                            inputElement.value = dataToFill[key]
                        }
                    }
                }
            },
            createEditTabs: function(formData) {
                editTabs.innerHTML = ''
                formModel.map((input) => {
                    const tabContent = `
                        <li class="pure-menu-item">
                            <a class="pure-menu-link editTab" id="${input.field}">${input.title}</a>
                        </li>`
                    editTabs.insertAdjacentHTML('beforeend', tabContent)
                })
            },
            createNewEditInput: function(fieldSelected) {
                editFieldsInput.innerHTML = ''
                const result = formModel.find((field) => field.field === fieldSelected)
                if (!result) return null
                const newInput = document.createElement(result.input)
                newInput.setAttribute('type', result.type)
                newInput.setAttribute('id', result.field)
                if (result.input === 'select') modifyDOM.createSelectInput(result.field, newInput)
                if (!result.editable) newInput.setAttribute('readonly', true)
                if (result.step !== null) newInput.setAttribute('step', result.step)
                newInput.className = "pure-input-1 editInput"
                return newInput
            },
            createSelectInput: function(type, selectElement) {
                if (type === 'productLine') {
                    productLines.map((line) => {
                        const option = document.createElement('option')
                        option.setAttribute('id', line.productLine)
                        option.textContent = line.productLine
                        selectElement.appendChild(option)
                    })
                }
            },
            updateNewEditInput: function(tabSelected, dataTextArea) {
                const inputContent = document.querySelector(".editInput")
                if (inputContent.tagName === 'SELECT') {
                    inputContent.value = dataTextArea
                } else {
                    dataTextArea === null ? inputContent.setAttribute('placeholder', 'N/D') : inputContent.value = dataTextArea
                }
            },
        }
    })
</script>